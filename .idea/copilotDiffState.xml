<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/Main.java" />
              <option name="originalContent" value="package org.landsofexile.core;&#10;&#10;import com.almasb.fxgl.app.GameApplication;&#10;import com.almasb.fxgl.app.GameSettings;&#10;import com.almasb.fxgl.entity.Entity;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import javafx.scene.paint.Color;&#10;import org.landsofexile.core.entities.EntityFactory;&#10;import org.landsofexile.core.entities.EntityType;&#10;&#10;public class Main extends GameApplication {&#10;    @Override&#10;    protected void initSettings(GameSettings settings) {&#10;        settings.setTitle(&quot;Lands of Exile&quot;);&#10;        settings.setVersion(&quot;1.0&quot;);&#10;        settings.setWidth(1024);&#10;        settings.setHeight(768);&#10;        settings.setMainMenuEnabled(false);&#10;        settings.setGameMenuEnabled(false);&#10;    }&#10;&#10;    @Override&#10;    protected void initGame() {&#10;        // 设置绿色背景&#10;        FXGL.getGameScene().setBackgroundColor(Color.GREEN);&#10;        &#10;        // 创建玩家实体并放置在屏幕中央&#10;        Entity player = EntityFactory.createEntity(EntityType.PLAYER_AXE_ADEPT);&#10;        player.setPosition(FXGL.getAppWidth() / 2.0, FXGL.getAppHeight() / 2.0);&#10;        &#10;        // 将玩家实体添加到游戏世界中&#10;        FXGL.getGameWorld().addEntity(player);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch(args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.landsofexile.core;&#10;&#10;import com.almasb.fxgl.app.GameApplication;&#10;import com.almasb.fxgl.app.GameSettings;&#10;import com.almasb.fxgl.entity.Entity;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import javafx.scene.paint.Color;&#10;import org.landsofexile.core.entities.EntityFactory;&#10;import org.landsofexile.core.entities.EntityType;&#10;&#10;public class Main extends GameApplication {&#10;    @Override&#10;    protected void initSettings(GameSettings settings) {&#10;        settings.setTitle(&quot;Lands of Exile&quot;);&#10;        settings.setVersion(&quot;1.0&quot;);&#10;        settings.setWidth(1024);&#10;        settings.setHeight(768);&#10;        settings.setMainMenuEnabled(false);&#10;        settings.setGameMenuEnabled(false);&#10;    }&#10;&#10;    @Override&#10;    protected void initGame() {&#10;        // 设置绿色背景&#10;        FXGL.getGameScene().setBackgroundColor(Color.GREEN);&#10;        &#10;        // 创建玩家实体并放置在屏幕中央&#10;        Entity player = EntityFactory.createEntity(EntityType.PLAYER_AXE_ADEPT);&#10;        player.setPosition(FXGL.getAppWidth() / 2.0, FXGL.getAppHeight() / 2.0);&#10;        &#10;        // 将玩家实体添加到游戏世界中&#10;        FXGL.getGameWorld().addEntity(player);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch(args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/entities/EntityFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/entities/EntityFactory.java" />
              <option name="originalContent" value="package org.landsofexile.core.entities;&#10;&#10;import com.almasb.fxgl.entity.Entity;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import javafx.scene.paint.Color;&#10;import javafx.scene.shape.Rectangle;&#10;import org.landsofexile.core.components.BasePlayerComponent;&#10;&#10;public class EntityFactory {&#10;&#10;    /**&#10;     * 创建实体的工厂方法&#10;     * 适用于创建不同类型的实体（玩家、npc、怪物）&#10;     * @param entityType 实体类型&#10;     * @return 创建的实体&#10;     */&#10;    public static Entity createEntity(EntityType entityType) {&#10;        // TODO：这个工厂创建后续可以进一步添加 view 等属性&#10;        Entity entity = FXGL.entityBuilder()&#10;                .type(entityType)&#10;                .build();&#10;&#10;        // 根据实体类型判断并绑定相应的组件和视图&#10;        if (isPlayerType(entityType)) {&#10;            // 创建玩家的视觉表现 - 一个蓝色方块&#10;            Rectangle playerRect = new Rectangle(32, 32, Color.BLUE);&#10;            entity.getViewComponent().addChild(playerRect);&#10;&#10;            // 玩家类型实体绑定BasePlayerComponent&#10;            entity.addComponent(new BasePlayerComponent());&#10;        } else if (isNPCType(entityType)) {&#10;            // NPC类型实体的组件绑定逻辑&#10;            // TODO: 后续添加NPC相关组件&#10;        } else if (isMonsterType(entityType)) {&#10;            // 怪物类型实体的组件绑定逻辑&#10;            // TODO: 后续添加怪物相关组件&#10;        }&#10;&#10;        return entity;&#10;    }&#10;&#10;    /**&#10;     * 判断是否为玩家类型&#10;     * @param entityType 实体类型&#10;     * @return 是否为玩家类型&#10;     */&#10;    private static boolean isPlayerType(EntityType entityType) {&#10;        return entityType.name().startsWith(&quot;PLAYER&quot;);&#10;    }&#10;&#10;    /**&#10;     * 判断是否为NPC类型&#10;     * @param entityType 实体类型&#10;     * @return 是否为NPC类型&#10;     */&#10;    private static boolean isNPCType(EntityType entityType) {&#10;        return entityType.name().startsWith(&quot;NPC&quot;);&#10;    }&#10;&#10;    /**&#10;     * 判断是否为怪物类型&#10;     * @param entityType 实体类型&#10;     * @return 是否为怪物类型&#10;     */&#10;    private static boolean isMonsterType(EntityType entityType) {&#10;        return entityType.name().startsWith(&quot;MONSTER&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.landsofexile.core.entities;&#10;&#10;import com.almasb.fxgl.entity.Entity;&#10;import com.almasb.fxgl.dsl.FXGL;&#10;import javafx.scene.paint.Color;&#10;import javafx.scene.shape.Rectangle;&#10;import org.landsofexile.core.components.BasePlayerComponent;&#10;&#10;public class EntityFactory {&#10;&#10;    /**&#10;     * 创建实体的工厂方法&#10;     * 适用于创建不同类型的实体（玩家、npc、怪物）&#10;     * @param entityType 实体类型&#10;     * @return 创建的实体&#10;     */&#10;    public static Entity createEntity(EntityType entityType) {&#10;        // TODO：这个工厂创建后续可以进一步添加 view 等属性&#10;        Entity entity = FXGL.entityBuilder()&#10;                .type(entityType)&#10;                .build();&#10;&#10;        // 根据实体类型判断并绑定相应的组件和视图&#10;        if (isPlayerType(entityType)) {&#10;            // 创建玩家的视觉表现 - 一个蓝色方块&#10;            Rectangle playerRect = new Rectangle(32, 32, Color.BLUE);&#10;            entity.getViewComponent().addChild(playerRect);&#10;&#10;            // 玩家类型实体绑定BasePlayerComponent&#10;            entity.addComponent(new BasePlayerComponent());&#10;        } else if (isNPCType(entityType)) {&#10;            // NPC类型实体的组件绑定逻辑&#10;            // TODO: 后续添加NPC相关组件&#10;        } else if (isMonsterType(entityType)) {&#10;            // 怪物类型实体的组件绑定逻辑&#10;            // TODO: 后续添加怪物相关组件&#10;        }&#10;&#10;        return entity;&#10;    }&#10;&#10;    /**&#10;     * 判断是否为玩家类型&#10;     * @param entityType 实体类型&#10;     * @return 是否为玩家类型&#10;     */&#10;    private static boolean isPlayerType(EntityType entityType) {&#10;        return entityType.name().startsWith(&quot;PLAYER&quot;);&#10;    }&#10;&#10;    /**&#10;     * 判断是否为NPC类型&#10;     * @param entityType 实体类型&#10;     * @return 是否为NPC类型&#10;     */&#10;    private static boolean isNPCType(EntityType entityType) {&#10;        return entityType.name().startsWith(&quot;NPC&quot;);&#10;    }&#10;&#10;    /**&#10;     * 判断是否为怪物类型&#10;     * @param entityType 实体类型&#10;     * @return 是否为怪物类型&#10;     */&#10;    private static boolean isMonsterType(EntityType entityType) {&#10;        return entityType.name().startsWith(&quot;MONSTER&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>