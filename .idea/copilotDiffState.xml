<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Lands_of_Exile_frontend/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lands_of_Exile_frontend/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;org.landsofexile&lt;/groupId&gt;&#10;    &lt;artifactId&gt;Lands_of_Exile_frontend&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;24&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;24&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt;&#10;            &lt;version&gt;26-ea+3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-graphics&lt;/artifactId&gt;&#10;            &lt;version&gt;26-ea+3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-fxml&lt;/artifactId&gt;&#10;            &lt;version&gt;26-ea+3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-media&lt;/artifactId&gt;&#10;            &lt;version&gt;26-ea+3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.almasb&lt;/groupId&gt;&#10;            &lt;artifactId&gt;fxgl-core&lt;/artifactId&gt;&#10;            &lt;version&gt;21.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.almasb&lt;/groupId&gt;&#10;            &lt;artifactId&gt;fxgl&lt;/artifactId&gt;&#10;            &lt;version&gt;21.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;org.landsofexile&lt;/groupId&gt;&#10;    &lt;artifactId&gt;Lands_of_Exile_frontend&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;24&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;24&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt;&#10;            &lt;version&gt;26-ea+3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-graphics&lt;/artifactId&gt;&#10;            &lt;version&gt;26-ea+3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-fxml&lt;/artifactId&gt;&#10;            &lt;version&gt;26-ea+3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-media&lt;/artifactId&gt;&#10;            &lt;version&gt;26-ea+3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.almasb&lt;/groupId&gt;&#10;            &lt;artifactId&gt;fxgl-core&lt;/artifactId&gt;&#10;            &lt;version&gt;21.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.almasb&lt;/groupId&gt;&#10;            &lt;artifactId&gt;fxgl&lt;/artifactId&gt;&#10;            &lt;version&gt;21.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/model/BaseLife.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/model/BaseLife.java" />
              <option name="originalContent" value="package org.landsofexile.core.model;&#10;&#10;import org.landsofexile.core.entities.EntityType;&#10;&#10;public class BaseLife {&#10;    &#10;    private String name;&#10;    private EntityType type; // 类型&#10;    private String description; // 描述&#10;    private int level; // 等级&#10;    &#10;    private double maxHP; // 最大生命值&#10;    private double currentHP; // 当前生命值&#10;&#10;    private double baseATK; // 基础攻击力&#10;    private double baseDef; // 基础防御力&#10;    private double baseDodgeRate; // 基础闪避率&#10;    private double baseSpeed; // 基础移动速度&#10;&#10;    // 构造方法&#10;    public BaseLife() {&#10;    }&#10;&#10;    public BaseLife(String name, EntityType type, String description, int level, &#10;                   double maxHP, double baseATK, double baseDef, &#10;                   double baseDodgeRate, double baseSpeed) {&#10;        this.name = name;&#10;        this.type = type;&#10;        this.description = description;&#10;        this.level = level;&#10;        this.maxHP = maxHP;&#10;        this.currentHP = maxHP; // 初始时当前生命值等于最大生命值&#10;        this.baseATK = baseATK;&#10;        this.baseDef = baseDef;&#10;        this.baseDodgeRate = baseDodgeRate;&#10;        this.baseSpeed = baseSpeed;&#10;    }&#10;&#10;    // Getter 方法&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public EntityType getType() {&#10;        return type;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public int getLevel() {&#10;        return level;&#10;    }&#10;&#10;    public double getMaxHP() {&#10;        return maxHP;&#10;    }&#10;&#10;    public double getCurrentHP() {&#10;        return currentHP;&#10;    }&#10;&#10;    public double getBaseATK() {&#10;        return baseATK;&#10;    }&#10;&#10;    public double getBaseDef() {&#10;        return baseDef;&#10;    }&#10;&#10;    public double getBaseDodgeRate() {&#10;        return baseDodgeRate;&#10;    }&#10;&#10;    public double getBaseSpeed() {&#10;        return baseSpeed;&#10;    }&#10;&#10;    // Setter 方法&#10;&#10;    public void setLevel(int level) {&#10;        this.level = level;&#10;    }&#10;&#10;    public void setMaxHP(double maxHP) {&#10;        this.maxHP = maxHP;&#10;    }&#10;&#10;    public void setCurrentHP(double currentHP) {&#10;        this.currentHP = Math.max(0, Math.min(currentHP, maxHP)); // 确保当前生命值在0和最大生命值之间&#10;    }&#10;&#10;    public void setBaseATK(double baseATK) {&#10;        this.baseATK = baseATK;&#10;    }&#10;&#10;    public void setBaseDef(double baseDef) {&#10;        this.baseDef = baseDef;&#10;    }&#10;&#10;    public void setBaseDodgeRate(double baseDodgeRate) {&#10;        this.baseDodgeRate = baseDodgeRate;&#10;    }&#10;&#10;    public void setBaseSpeed(double baseSpeed) {&#10;        this.baseSpeed = baseSpeed;&#10;    }&#10;&#10;    // 实用方法&#10;    public boolean isAlive() {&#10;        return currentHP &gt; 0;&#10;    }&#10;&#10;    public double getHPPercentage() {&#10;        return maxHP &gt; 0 ? (currentHP / maxHP) * 100 : 0;&#10;    }&#10;&#10;    public void heal(double amount) {&#10;        setCurrentHP(currentHP + amount);&#10;    }&#10;&#10;    public void takeDamage(double damage) {&#10;        setCurrentHP(currentHP - damage);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.landsofexile.core.model;&#10;&#10;import org.landsofexile.core.entities.EntityType;&#10;&#10;public class BaseLife {&#10;    &#10;    private String name;&#10;    private EntityType type; // 类型&#10;    private String description; // 描述&#10;    private int level; // 等级&#10;    &#10;    private double maxHP; // 最大生命值&#10;    private double currentHP; // 当前生命值&#10;&#10;    private double baseATK; // 基础攻击力&#10;    private double baseDef; // 基础防御力&#10;    private double baseDodgeRate; // 基础闪避率&#10;    private double baseSpeed; // 基础移动速度&#10;&#10;    // 构造方法&#10;    public BaseLife() {&#10;    }&#10;&#10;    public BaseLife(String name, EntityType type, String description, int level, &#10;                   double maxHP, double baseATK, double baseDef, &#10;                   double baseDodgeRate, double baseSpeed) {&#10;        this.name = name;&#10;        this.type = type;&#10;        this.description = description;&#10;        this.level = level;&#10;        this.maxHP = maxHP;&#10;        this.currentHP = maxHP; // 初始时当前生命值等于最大生命值&#10;        this.baseATK = baseATK;&#10;        this.baseDef = baseDef;&#10;        this.baseDodgeRate = baseDodgeRate;&#10;        this.baseSpeed = baseSpeed;&#10;    }&#10;&#10;    // Getter 方法&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public EntityType getType() {&#10;        return type;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public int getLevel() {&#10;        return level;&#10;    }&#10;&#10;    public double getMaxHP() {&#10;        return maxHP;&#10;    }&#10;&#10;    public double getCurrentHP() {&#10;        return currentHP;&#10;    }&#10;&#10;    public double getBaseATK() {&#10;        return baseATK;&#10;    }&#10;&#10;    public double getBaseDef() {&#10;        return baseDef;&#10;    }&#10;&#10;    public double getBaseDodgeRate() {&#10;        return baseDodgeRate;&#10;    }&#10;&#10;    public double getBaseSpeed() {&#10;        return baseSpeed;&#10;    }&#10;&#10;    // Setter 方法&#10;&#10;    public void setLevel(int level) {&#10;        this.level = level;&#10;    }&#10;&#10;    public void setMaxHP(double maxHP) {&#10;        this.maxHP = maxHP;&#10;    }&#10;&#10;    public void setCurrentHP(double currentHP) {&#10;        this.currentHP = Math.max(0, Math.min(currentHP, maxHP)); // 确保当前生命值在0和最大生命值之间&#10;    }&#10;&#10;    public void setBaseATK(double baseATK) {&#10;        this.baseATK = baseATK;&#10;    }&#10;&#10;    public void setBaseDef(double baseDef) {&#10;        this.baseDef = baseDef;&#10;    }&#10;&#10;    public void setBaseDodgeRate(double baseDodgeRate) {&#10;        this.baseDodgeRate = baseDodgeRate;&#10;    }&#10;&#10;    public void setBaseSpeed(double baseSpeed) {&#10;        this.baseSpeed = baseSpeed;&#10;    }&#10;&#10;    // 实用方法&#10;    public boolean isAlive() {&#10;        return currentHP &gt; 0;&#10;    }&#10;&#10;    public double getHPPercentage() {&#10;        return maxHP &gt; 0 ? (currentHP / maxHP) * 100 : 0;&#10;    }&#10;&#10;    public void heal(double amount) {&#10;        setCurrentHP(currentHP + amount);&#10;    }&#10;&#10;    public void takeDamage(double damage) {&#10;        setCurrentHP(currentHP - damage);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/model/BaseMonster.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/model/BaseMonster.java" />
              <option name="originalContent" value="package org.landsofexile.core.model;&#10;&#10;import org.landsofexile.core.entities.EntityType;&#10;&#10;public class BaseMonster extends BaseLife {&#10;    /*&#10;    * 怪物基础模型&#10;    * */&#10;    &#10;    private double currentDef; // 当前防御力（包含增益和减益）&#10;    private double currentDodgeRate; // 当前闪避率（包含增益和减益）&#10;    private double currentSpeed; // 当前移动速度（包含增益和减益）&#10;    &#10;    private double baseAttackSpeed; // 攻击速度（影响攻击频率）&#10;    private double currentAttackSpeed; // 当前攻击速度（包含增益和减益）&#10;    &#10;    private double detectionRange; // 侦测范围（发现敌人的距离）&#10;    private double attackRange; // 攻击范围&#10;    &#10;    private boolean isAggressive; // 是否主动攻击&#10;    private boolean isBoss; // 是否为Boss怪物&#10;    &#10;    private double expReward; // 击杀后获得的经验值奖励&#10;    private double goldReward; // 击杀后获得的金币奖励&#10;&#10;    // 构造方法&#10;    public BaseMonster() {&#10;        super();&#10;    }&#10;&#10;    public BaseMonster(String name, EntityType type, String description, int level,&#10;                      double maxHP, double baseATK, double baseDef, &#10;                      double baseDodgeRate, double baseSpeed, double baseAttackSpeed,&#10;                      double detectionRange, double attackRange, &#10;                      boolean isAggressive, boolean isBoss, &#10;                      double expReward, double goldReward) {&#10;        super(name, type, description, level, maxHP, baseATK, baseDef, baseDodgeRate, baseSpeed);&#10;        this.currentDef = baseDef;&#10;        this.currentDodgeRate = baseDodgeRate;&#10;        this.currentSpeed = baseSpeed;&#10;        this.baseAttackSpeed = baseAttackSpeed;&#10;        this.currentAttackSpeed = baseAttackSpeed;&#10;        this.detectionRange = detectionRange;&#10;        this.attackRange = attackRange;&#10;        this.isAggressive = isAggressive;&#10;        this.isBoss = isBoss;&#10;        this.expReward = expReward;&#10;        this.goldReward = goldReward;&#10;    }&#10;&#10;    // Getter 方法&#10;    public double getCurrentDef() {&#10;        return currentDef;&#10;    }&#10;&#10;    public double getCurrentDodgeRate() {&#10;        return currentDodgeRate;&#10;    }&#10;&#10;    public double getCurrentSpeed() {&#10;        return currentSpeed;&#10;    }&#10;&#10;    public double getBaseAttackSpeed() {&#10;        return baseAttackSpeed;&#10;    }&#10;&#10;    public double getCurrentAttackSpeed() {&#10;        return currentAttackSpeed;&#10;    }&#10;&#10;    public double getDetectionRange() {&#10;        return detectionRange;&#10;    }&#10;&#10;    public double getAttackRange() {&#10;        return attackRange;&#10;    }&#10;&#10;    public boolean isAggressive() {&#10;        return isAggressive;&#10;    }&#10;&#10;    public boolean isBoss() {&#10;        return isBoss;&#10;    }&#10;&#10;    public double getExpReward() {&#10;        return expReward;&#10;    }&#10;&#10;    public double getGoldReward() {&#10;        return goldReward;&#10;    }&#10;&#10;    // Setter 方法&#10;    public void setCurrentDef(double currentDef) {&#10;        this.currentDef = currentDef;&#10;    }&#10;&#10;    public void setCurrentDodgeRate(double currentDodgeRate) {&#10;        this.currentDodgeRate = currentDodgeRate;&#10;    }&#10;&#10;    public void setCurrentSpeed(double currentSpeed) {&#10;        this.currentSpeed = currentSpeed;&#10;    }&#10;&#10;    public void setBaseAttackSpeed(double baseAttackSpeed) {&#10;        this.baseAttackSpeed = baseAttackSpeed;&#10;    }&#10;&#10;    public void setCurrentAttackSpeed(double currentAttackSpeed) {&#10;        this.currentAttackSpeed = currentAttackSpeed;&#10;    }&#10;&#10;    public void setDetectionRange(double detectionRange) {&#10;        this.detectionRange = detectionRange;&#10;    }&#10;&#10;    public void setAttackRange(double attackRange) {&#10;        this.attackRange = attackRange;&#10;    }&#10;&#10;    public void setAggressive(boolean aggressive) {&#10;        isAggressive = aggressive;&#10;    }&#10;&#10;    public void setBoss(boolean boss) {&#10;        isBoss = boss;&#10;    }&#10;&#10;    public void setExpReward(double expReward) {&#10;        this.expReward = expReward;&#10;    }&#10;&#10;    public void setGoldReward(double goldReward) {&#10;        this.goldReward = goldReward;&#10;    }&#10;&#10;    // 重置所有当前值为基础值&#10;    public void resetToBaseStats() {&#10;        this.currentDef = getBaseDef();&#10;        this.currentDodgeRate = getBaseDodgeRate();&#10;        this.currentSpeed = getBaseSpeed();&#10;        this.currentAttackSpeed = this.baseAttackSpeed;&#10;    }&#10;&#10;    // 计算击杀奖励（可以根据等级差异调整）&#10;    public double calculateExpReward(int playerLevel) {&#10;        double levelDiff = this.getLevel() - playerLevel;&#10;        double multiplier = 1.0 + (levelDiff * 0.1); // 等级差每级增加10%奖励&#10;        return Math.max(0.1, expReward * Math.max(0.1, multiplier)); // 至少10%奖励&#10;    }&#10;&#10;    public double calculateGoldReward(int playerLevel) {&#10;        double levelDiff = this.getLevel() - playerLevel;&#10;        double multiplier = 1.0 + (levelDiff * 0.05); // 等级差每级增加5%奖励&#10;        return Math.max(0.1, goldReward * Math.max(0.1, multiplier)); // 至少10%奖励&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.landsofexile.core.model;&#10;&#10;import org.landsofexile.core.entities.EntityType;&#10;&#10;public class BaseMonster extends BaseLife {&#10;    /*&#10;    * 怪物基础模型&#10;    * */&#10;    &#10;    private double currentDef; // 当前防御力（包含增益和减益）&#10;    private double currentDodgeRate; // 当前闪避率（包含增益和减益）&#10;    private double currentSpeed; // 当前移动速度（包含增益和减益）&#10;    &#10;    private double baseAttackSpeed; // 攻击速度（影响攻击频率）&#10;    private double currentAttackSpeed; // 当前攻击速度（包含增益和减益）&#10;    &#10;    private double detectionRange; // 侦测范围（发现敌人的距离）&#10;    private double attackRange; // 攻击范围&#10;    &#10;    private boolean isAggressive; // 是否主动攻击&#10;    private boolean isBoss; // 是否为Boss怪物&#10;    &#10;    private double expReward; // 击杀后获得的经验值奖励&#10;    private double goldReward; // 击杀后获得的金币奖励&#10;&#10;    // 构造方法&#10;    public BaseMonster() {&#10;        super();&#10;    }&#10;&#10;    public BaseMonster(String name, EntityType type, String description, int level,&#10;                      double maxHP, double baseATK, double baseDef, &#10;                      double baseDodgeRate, double baseSpeed, double baseAttackSpeed,&#10;                      double detectionRange, double attackRange, &#10;                      boolean isAggressive, boolean isBoss, &#10;                      double expReward, double goldReward) {&#10;        super(name, type, description, level, maxHP, baseATK, baseDef, baseDodgeRate, baseSpeed);&#10;        this.currentDef = baseDef;&#10;        this.currentDodgeRate = baseDodgeRate;&#10;        this.currentSpeed = baseSpeed;&#10;        this.baseAttackSpeed = baseAttackSpeed;&#10;        this.currentAttackSpeed = baseAttackSpeed;&#10;        this.detectionRange = detectionRange;&#10;        this.attackRange = attackRange;&#10;        this.isAggressive = isAggressive;&#10;        this.isBoss = isBoss;&#10;        this.expReward = expReward;&#10;        this.goldReward = goldReward;&#10;    }&#10;&#10;    // Getter 方法&#10;    public double getCurrentDef() {&#10;        return currentDef;&#10;    }&#10;&#10;    public double getCurrentDodgeRate() {&#10;        return currentDodgeRate;&#10;    }&#10;&#10;    public double getCurrentSpeed() {&#10;        return currentSpeed;&#10;    }&#10;&#10;    public double getBaseAttackSpeed() {&#10;        return baseAttackSpeed;&#10;    }&#10;&#10;    public double getCurrentAttackSpeed() {&#10;        return currentAttackSpeed;&#10;    }&#10;&#10;    public double getDetectionRange() {&#10;        return detectionRange;&#10;    }&#10;&#10;    public double getAttackRange() {&#10;        return attackRange;&#10;    }&#10;&#10;    public boolean isAggressive() {&#10;        return isAggressive;&#10;    }&#10;&#10;    public boolean isBoss() {&#10;        return isBoss;&#10;    }&#10;&#10;    public double getExpReward() {&#10;        return expReward;&#10;    }&#10;&#10;    public double getGoldReward() {&#10;        return goldReward;&#10;    }&#10;&#10;    // Setter 方法&#10;    public void setCurrentDef(double currentDef) {&#10;        this.currentDef = currentDef;&#10;    }&#10;&#10;    public void setCurrentDodgeRate(double currentDodgeRate) {&#10;        this.currentDodgeRate = currentDodgeRate;&#10;    }&#10;&#10;    public void setCurrentSpeed(double currentSpeed) {&#10;        this.currentSpeed = currentSpeed;&#10;    }&#10;&#10;    public void setBaseAttackSpeed(double baseAttackSpeed) {&#10;        this.baseAttackSpeed = baseAttackSpeed;&#10;    }&#10;&#10;    public void setCurrentAttackSpeed(double currentAttackSpeed) {&#10;        this.currentAttackSpeed = currentAttackSpeed;&#10;    }&#10;&#10;    public void setDetectionRange(double detectionRange) {&#10;        this.detectionRange = detectionRange;&#10;    }&#10;&#10;    public void setAttackRange(double attackRange) {&#10;        this.attackRange = attackRange;&#10;    }&#10;&#10;    public void setAggressive(boolean aggressive) {&#10;        isAggressive = aggressive;&#10;    }&#10;&#10;    public void setBoss(boolean boss) {&#10;        isBoss = boss;&#10;    }&#10;&#10;    public void setExpReward(double expReward) {&#10;        this.expReward = expReward;&#10;    }&#10;&#10;    public void setGoldReward(double goldReward) {&#10;        this.goldReward = goldReward;&#10;    }&#10;&#10;    // 重置所有当前值为基础值&#10;    public void resetToBaseStats() {&#10;        this.currentDef = getBaseDef();&#10;        this.currentDodgeRate = getBaseDodgeRate();&#10;        this.currentSpeed = getBaseSpeed();&#10;        this.currentAttackSpeed = this.baseAttackSpeed;&#10;    }&#10;&#10;    // 计算击杀奖励（可以根据等级差异调整）&#10;    public double calculateExpReward(int playerLevel) {&#10;        double levelDiff = this.getLevel() - playerLevel;&#10;        double multiplier = 1.0 + (levelDiff * 0.1); // 等级差每级增加10%奖励&#10;        return Math.max(0.1, expReward * Math.max(0.1, multiplier)); // 至少10%奖励&#10;    }&#10;&#10;    public double calculateGoldReward(int playerLevel) {&#10;        double levelDiff = this.getLevel() - playerLevel;&#10;        double multiplier = 1.0 + (levelDiff * 0.05); // 等级差每级增加5%奖励&#10;        return Math.max(0.1, goldReward * Math.max(0.1, multiplier)); // 至少10%奖励&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/model/BaseNPC.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/model/BaseNPC.java" />
              <option name="originalContent" value="package org.landsofexile.core.model;&#10;&#10;import org.landsofexile.core.entities.EntityType;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;&#10;public class BaseNPC extends BaseLife {&#10;    /*&#10;    * NPC基础模型&#10;    * */&#10;    &#10;    private boolean isInteractable; // 是否可交互&#10;    private boolean hasDialogue; // 是否有对话&#10;    private boolean hasShop; // 是否有商店功能&#10;    private boolean hasQuest; // 是否有任务功能&#10;    &#10;    private String greeting; // 问候语&#10;    private List&lt;String&gt; dialogueOptions; // 对话选项列表&#10;    &#10;    private String shopType; // 商店类型（武器、装备、道具、药水等）&#10;    private double buyPriceMultiplier; // 购买价格倍数（基于物品基础价格）&#10;    private double sellPriceMultiplier; // 出售价格倍数（玩家卖给NPC的价格倍数）&#10;    &#10;    private List&lt;String&gt; availableQuests; // 可用任务列表&#10;    private List&lt;String&gt; completedQuests; // 已完成任务列表&#10;    &#10;    private String faction; // 所属势力&#10;    private int relationshipLevel; // 与玩家的关系等级（影响价格和对话）&#10;&#10;    // 构造方法&#10;    public BaseNPC() {&#10;        super();&#10;        this.dialogueOptions = new ArrayList&lt;&gt;();&#10;        this.availableQuests = new ArrayList&lt;&gt;();&#10;        this.completedQuests = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public BaseNPC(String name, EntityType type, String description, int level,&#10;                  double maxHP, double baseATK, double baseDef,&#10;                  double baseDodgeRate, double baseSpeed,&#10;                  boolean isInteractable, boolean hasDialogue, boolean hasShop, boolean hasQuest,&#10;                  String greeting, String shopType, &#10;                  double buyPriceMultiplier, double sellPriceMultiplier,&#10;                  String faction, int relationshipLevel) {&#10;        super(name, type, description, level, maxHP, baseATK, baseDef, baseDodgeRate, baseSpeed);&#10;        this.isInteractable = isInteractable;&#10;        this.hasDialogue = hasDialogue;&#10;        this.hasShop = hasShop;&#10;        this.hasQuest = hasQuest;&#10;        this.greeting = greeting;&#10;        this.shopType = shopType;&#10;        this.buyPriceMultiplier = buyPriceMultiplier;&#10;        this.sellPriceMultiplier = sellPriceMultiplier;&#10;        this.faction = faction;&#10;        this.relationshipLevel = relationshipLevel;&#10;        this.dialogueOptions = new ArrayList&lt;&gt;();&#10;        this.availableQuests = new ArrayList&lt;&gt;();&#10;        this.completedQuests = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    // Getter 方法&#10;    public boolean isInteractable() {&#10;        return isInteractable;&#10;    }&#10;&#10;    public boolean hasDialogue() {&#10;        return hasDialogue;&#10;    }&#10;&#10;    public boolean hasShop() {&#10;        return hasShop;&#10;    }&#10;&#10;    public boolean hasQuest() {&#10;        return hasQuest;&#10;    }&#10;&#10;    public String getGreeting() {&#10;        return greeting;&#10;    }&#10;&#10;    public List&lt;String&gt; getDialogueOptions() {&#10;        return new ArrayList&lt;&gt;(dialogueOptions); // 返回副本，防止外部修改&#10;    }&#10;&#10;    public String getShopType() {&#10;        return shopType;&#10;    }&#10;&#10;    public double getBuyPriceMultiplier() {&#10;        return buyPriceMultiplier;&#10;    }&#10;&#10;    public double getSellPriceMultiplier() {&#10;        return sellPriceMultiplier;&#10;    }&#10;&#10;    public List&lt;String&gt; getAvailableQuests() {&#10;        return new ArrayList&lt;&gt;(availableQuests);&#10;    }&#10;&#10;    public List&lt;String&gt; getCompletedQuests() {&#10;        return new ArrayList&lt;&gt;(completedQuests);&#10;    }&#10;&#10;    public String getFaction() {&#10;        return faction;&#10;    }&#10;&#10;    public int getRelationshipLevel() {&#10;        return relationshipLevel;&#10;    }&#10;&#10;    // Setter 方法&#10;    public void setInteractable(boolean interactable) {&#10;        isInteractable = interactable;&#10;    }&#10;&#10;    public void setHasDialogue(boolean hasDialogue) {&#10;        this.hasDialogue = hasDialogue;&#10;    }&#10;&#10;    public void setHasShop(boolean hasShop) {&#10;        this.hasShop = hasShop;&#10;    }&#10;&#10;    public void setHasQuest(boolean hasQuest) {&#10;        this.hasQuest = hasQuest;&#10;    }&#10;&#10;    public void setGreeting(String greeting) {&#10;        this.greeting = greeting;&#10;    }&#10;&#10;    public void setDialogueOptions(List&lt;String&gt; dialogueOptions) {&#10;        this.dialogueOptions = new ArrayList&lt;&gt;(dialogueOptions);&#10;    }&#10;&#10;    public void setShopType(String shopType) {&#10;        this.shopType = shopType;&#10;    }&#10;&#10;    public void setBuyPriceMultiplier(double buyPriceMultiplier) {&#10;        this.buyPriceMultiplier = buyPriceMultiplier;&#10;    }&#10;&#10;    public void setSellPriceMultiplier(double sellPriceMultiplier) {&#10;        this.sellPriceMultiplier = sellPriceMultiplier;&#10;    }&#10;&#10;    public void setAvailableQuests(List&lt;String&gt; availableQuests) {&#10;        this.availableQuests = new ArrayList&lt;&gt;(availableQuests);&#10;    }&#10;&#10;    public void setCompletedQuests(List&lt;String&gt; completedQuests) {&#10;        this.completedQuests = new ArrayList&lt;&gt;(completedQuests);&#10;    }&#10;&#10;    public void setFaction(String faction) {&#10;        this.faction = faction;&#10;    }&#10;&#10;    public void setRelationshipLevel(int relationshipLevel) {&#10;        this.relationshipLevel = relationshipLevel;&#10;    }&#10;&#10;    // 对话相关方法&#10;    public void addDialogueOption(String option) {&#10;        if (!dialogueOptions.contains(option)) {&#10;            dialogueOptions.add(option);&#10;        }&#10;    }&#10;&#10;    public void removeDialogueOption(String option) {&#10;        dialogueOptions.remove(option);&#10;    }&#10;&#10;    // 任务相关方法&#10;    public void addQuest(String questId) {&#10;        if (!availableQuests.contains(questId) &amp;&amp; !completedQuests.contains(questId)) {&#10;            availableQuests.add(questId);&#10;        }&#10;    }&#10;&#10;    public void completeQuest(String questId) {&#10;        if (availableQuests.remove(questId)) {&#10;            completedQuests.add(questId);&#10;        }&#10;    }&#10;&#10;    public boolean hasCompletedQuest(String questId) {&#10;        return completedQuests.contains(questId);&#10;    }&#10;&#10;    public boolean hasAvailableQuest(String questId) {&#10;        return availableQuests.contains(questId);&#10;    }&#10;&#10;    // 关系等级相关方法&#10;    public void improveRelationship(int amount) {&#10;        this.relationshipLevel = Math.min(100, this.relationshipLevel + amount); // 最大关系等级100&#10;    }&#10;&#10;    public void worsenRelationship(int amount) {&#10;        this.relationshipLevel = Math.max(-100, this.relationshipLevel - amount); // 最小关系等级-100&#10;    }&#10;&#10;    // 根据关系等级计算实际价格倍数&#10;    public double getActualBuyPriceMultiplier() {&#10;        double relationshipBonus = relationshipLevel * 0.001; // 关系等级每级减少0.1%购买成本&#10;        return Math.max(0.5, buyPriceMultiplier - relationshipBonus); // 最低50%价格&#10;    }&#10;&#10;    public double getActualSellPriceMultiplier() {&#10;        double relationshipBonus = relationshipLevel * 0.001; // 关系等级每级增加0.1%出售收益&#10;        return Math.min(1.0, sellPriceMultiplier + relationshipBonus); // 最高100%价格&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.landsofexile.core.model;&#10;&#10;import org.landsofexile.core.entities.EntityType;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;&#10;public class BaseNPC extends BaseLife {&#10;    /*&#10;    * NPC基础模型&#10;    * */&#10;    &#10;    private boolean isInteractable; // 是否可交互&#10;    private boolean hasDialogue; // 是否有对话&#10;    private boolean hasShop; // 是否有商店功能&#10;    private boolean hasQuest; // 是否有任务功能&#10;    &#10;    private String greeting; // 问候语&#10;    private List&lt;String&gt; dialogueOptions; // 对话选项列表&#10;    &#10;    private String shopType; // 商店类型（武器、装备、道具、药水等）&#10;    private double buyPriceMultiplier; // 购买价格倍数（基于物品基础价格）&#10;    private double sellPriceMultiplier; // 出售价格倍数（玩家卖给NPC的价格倍数）&#10;    &#10;    private List&lt;String&gt; availableQuests; // 可用任务列表&#10;    private List&lt;String&gt; completedQuests; // 已完成任务列表&#10;    &#10;    private String faction; // 所属势力&#10;    private int relationshipLevel; // 与玩家的关系等级（影响价格和对话）&#10;&#10;    // 构造方法&#10;    public BaseNPC() {&#10;        super();&#10;        this.dialogueOptions = new ArrayList&lt;&gt;();&#10;        this.availableQuests = new ArrayList&lt;&gt;();&#10;        this.completedQuests = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public BaseNPC(String name, EntityType type, String description, int level,&#10;                  double maxHP, double baseATK, double baseDef,&#10;                  double baseDodgeRate, double baseSpeed,&#10;                  boolean isInteractable, boolean hasDialogue, boolean hasShop, boolean hasQuest,&#10;                  String greeting, String shopType, &#10;                  double buyPriceMultiplier, double sellPriceMultiplier,&#10;                  String faction, int relationshipLevel) {&#10;        super(name, type, description, level, maxHP, baseATK, baseDef, baseDodgeRate, baseSpeed);&#10;        this.isInteractable = isInteractable;&#10;        this.hasDialogue = hasDialogue;&#10;        this.hasShop = hasShop;&#10;        this.hasQuest = hasQuest;&#10;        this.greeting = greeting;&#10;        this.shopType = shopType;&#10;        this.buyPriceMultiplier = buyPriceMultiplier;&#10;        this.sellPriceMultiplier = sellPriceMultiplier;&#10;        this.faction = faction;&#10;        this.relationshipLevel = relationshipLevel;&#10;        this.dialogueOptions = new ArrayList&lt;&gt;();&#10;        this.availableQuests = new ArrayList&lt;&gt;();&#10;        this.completedQuests = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    // Getter 方法&#10;    public boolean isInteractable() {&#10;        return isInteractable;&#10;    }&#10;&#10;    public boolean hasDialogue() {&#10;        return hasDialogue;&#10;    }&#10;&#10;    public boolean hasShop() {&#10;        return hasShop;&#10;    }&#10;&#10;    public boolean hasQuest() {&#10;        return hasQuest;&#10;    }&#10;&#10;    public String getGreeting() {&#10;        return greeting;&#10;    }&#10;&#10;    public List&lt;String&gt; getDialogueOptions() {&#10;        return new ArrayList&lt;&gt;(dialogueOptions); // 返回副本，防止外部修改&#10;    }&#10;&#10;    public String getShopType() {&#10;        return shopType;&#10;    }&#10;&#10;    public double getBuyPriceMultiplier() {&#10;        return buyPriceMultiplier;&#10;    }&#10;&#10;    public double getSellPriceMultiplier() {&#10;        return sellPriceMultiplier;&#10;    }&#10;&#10;    public List&lt;String&gt; getAvailableQuests() {&#10;        return new ArrayList&lt;&gt;(availableQuests);&#10;    }&#10;&#10;    public List&lt;String&gt; getCompletedQuests() {&#10;        return new ArrayList&lt;&gt;(completedQuests);&#10;    }&#10;&#10;    public String getFaction() {&#10;        return faction;&#10;    }&#10;&#10;    public int getRelationshipLevel() {&#10;        return relationshipLevel;&#10;    }&#10;&#10;    // Setter 方法&#10;    public void setInteractable(boolean interactable) {&#10;        isInteractable = interactable;&#10;    }&#10;&#10;    public void setHasDialogue(boolean hasDialogue) {&#10;        this.hasDialogue = hasDialogue;&#10;    }&#10;&#10;    public void setHasShop(boolean hasShop) {&#10;        this.hasShop = hasShop;&#10;    }&#10;&#10;    public void setHasQuest(boolean hasQuest) {&#10;        this.hasQuest = hasQuest;&#10;    }&#10;&#10;    public void setGreeting(String greeting) {&#10;        this.greeting = greeting;&#10;    }&#10;&#10;    public void setDialogueOptions(List&lt;String&gt; dialogueOptions) {&#10;        this.dialogueOptions = new ArrayList&lt;&gt;(dialogueOptions);&#10;    }&#10;&#10;    public void setShopType(String shopType) {&#10;        this.shopType = shopType;&#10;    }&#10;&#10;    public void setBuyPriceMultiplier(double buyPriceMultiplier) {&#10;        this.buyPriceMultiplier = buyPriceMultiplier;&#10;    }&#10;&#10;    public void setSellPriceMultiplier(double sellPriceMultiplier) {&#10;        this.sellPriceMultiplier = sellPriceMultiplier;&#10;    }&#10;&#10;    public void setAvailableQuests(List&lt;String&gt; availableQuests) {&#10;        this.availableQuests = new ArrayList&lt;&gt;(availableQuests);&#10;    }&#10;&#10;    public void setCompletedQuests(List&lt;String&gt; completedQuests) {&#10;        this.completedQuests = new ArrayList&lt;&gt;(completedQuests);&#10;    }&#10;&#10;    public void setFaction(String faction) {&#10;        this.faction = faction;&#10;    }&#10;&#10;    public void setRelationshipLevel(int relationshipLevel) {&#10;        this.relationshipLevel = relationshipLevel;&#10;    }&#10;&#10;    // 对话相关方法&#10;    public void addDialogueOption(String option) {&#10;        if (!dialogueOptions.contains(option)) {&#10;            dialogueOptions.add(option);&#10;        }&#10;    }&#10;&#10;    public void removeDialogueOption(String option) {&#10;        dialogueOptions.remove(option);&#10;    }&#10;&#10;    // 任务相关方法&#10;    public void addQuest(String questId) {&#10;        if (!availableQuests.contains(questId) &amp;&amp; !completedQuests.contains(questId)) {&#10;            availableQuests.add(questId);&#10;        }&#10;    }&#10;&#10;    public void completeQuest(String questId) {&#10;        if (availableQuests.remove(questId)) {&#10;            completedQuests.add(questId);&#10;        }&#10;    }&#10;&#10;    public boolean hasCompletedQuest(String questId) {&#10;        return completedQuests.contains(questId);&#10;    }&#10;&#10;    public boolean hasAvailableQuest(String questId) {&#10;        return availableQuests.contains(questId);&#10;    }&#10;&#10;    // 关系等级相关方法&#10;    public void improveRelationship(int amount) {&#10;        this.relationshipLevel = Math.min(100, this.relationshipLevel + amount); // 最大关系等级100&#10;    }&#10;&#10;    public void worsenRelationship(int amount) {&#10;        this.relationshipLevel = Math.max(-100, this.relationshipLevel - amount); // 最小关系等级-100&#10;    }&#10;&#10;    // 根据关系等级计算实际价格倍数&#10;    public double getActualBuyPriceMultiplier() {&#10;        double relationshipBonus = relationshipLevel * 0.001; // 关系等级每级减少0.1%购买成本&#10;        return Math.max(0.5, buyPriceMultiplier - relationshipBonus); // 最低50%价格&#10;    }&#10;&#10;    public double getActualSellPriceMultiplier() {&#10;        double relationshipBonus = relationshipLevel * 0.001; // 关系等级每级增加0.1%出售收益&#10;        return Math.min(1.0, sellPriceMultiplier + relationshipBonus); // 最高100%价格&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/model/BasePlayer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lands_of_Exile_frontend/src/main/java/org/landsofexile/core/model/BasePlayer.java" />
              <option name="originalContent" value="package org.landsofexile.core.model;&#10;&#10;import org.landsofexile.core.entities.EntityType;&#10;&#10;public class BasePlayer extends BaseLife {&#10;    /*&#10;    * 角色基础模型&#10;    * */&#10;    &#10;    private double currentATK; // 当前攻击力（包含增益和减益）&#10;    private double currentDef; // 当前防御力（包含增益和减益）&#10;    private double currentDodgeRate; // 当前闪避率（包含增益和减益）&#10;    private double currentSpeed; // 当前移动速度（包含增益和减益）&#10;    &#10;    private double baseCritRate; // 基础暴击率（百分比）&#10;    private double currentCritRate; // 当前暴击率（包含增益和减益，百分比）&#10;    &#10;    private double baseCritDamage; // 暴击伤害加成（百分比）&#10;    private double currentCritDamage; // 当前暴击伤害加成（包含增益和减益，百分比）&#10;    &#10;    private double baseAttackSpeed; // 攻击速度（影响攻击频率）&#10;    private double currentAttackSpeed; // 当前攻击速度（包含增益和减益）&#10;&#10;    // 构造方法&#10;    public BasePlayer() {&#10;        super();&#10;    }&#10;&#10;    public BasePlayer(String name, EntityType type, String description, int level,&#10;                     double maxHP, double baseATK, double baseDef, &#10;                     double baseDodgeRate, double baseSpeed,&#10;                     double baseCritRate, double baseCritDamage,&#10;                     double baseAttackSpeed) {&#10;        super(name, type, description, level, maxHP, baseATK, baseDef, baseDodgeRate, baseSpeed);&#10;        this.currentATK = baseATK;&#10;        this.currentDef = baseDef;&#10;        this.currentDodgeRate = baseDodgeRate;&#10;        this.currentSpeed = baseSpeed;&#10;        this.baseCritRate = baseCritRate;&#10;        this.currentCritRate = baseCritRate;&#10;        this.baseCritDamage = baseCritDamage;&#10;        this.currentCritDamage = baseCritDamage;&#10;        this.baseAttackSpeed = baseAttackSpeed;&#10;        this.currentAttackSpeed = baseAttackSpeed;&#10;    }&#10;&#10;    // Getter 方法&#10;    public double getCurrentATK() {&#10;        return currentATK;&#10;    }&#10;&#10;    public double getCurrentDef() {&#10;        return currentDef;&#10;    }&#10;&#10;    public double getCurrentDodgeRate() {&#10;        return currentDodgeRate;&#10;    }&#10;&#10;    public double getCurrentSpeed() {&#10;        return currentSpeed;&#10;    }&#10;&#10;    public double getBaseCritRate() {&#10;        return baseCritRate;&#10;    }&#10;&#10;    public double getCurrentCritRate() {&#10;        return currentCritRate;&#10;    }&#10;&#10;    public double getBaseCritDamage() {&#10;        return baseCritDamage;&#10;    }&#10;&#10;    public double getCurrentCritDamage() {&#10;        return currentCritDamage;&#10;    }&#10;&#10;    public double getBaseAttackSpeed() {&#10;        return baseAttackSpeed;&#10;    }&#10;&#10;    public double getCurrentAttackSpeed() {&#10;        return currentAttackSpeed;&#10;    }&#10;&#10;    // Setter 方法&#10;    public void setCurrentATK(double currentATK) {&#10;        this.currentATK = currentATK;&#10;    }&#10;&#10;    public void setCurrentDef(double currentDef) {&#10;        this.currentDef = currentDef;&#10;    }&#10;&#10;    public void setCurrentDodgeRate(double currentDodgeRate) {&#10;        this.currentDodgeRate = currentDodgeRate;&#10;    }&#10;&#10;    public void setCurrentSpeed(double currentSpeed) {&#10;        this.currentSpeed = currentSpeed;&#10;    }&#10;&#10;    public void setBaseCritRate(double baseCritRate) {&#10;        this.baseCritRate = baseCritRate;&#10;    }&#10;&#10;    public void setCurrentCritRate(double currentCritRate) {&#10;        this.currentCritRate = currentCritRate;&#10;    }&#10;&#10;    public void setBaseCritDamage(double baseCritDamage) {&#10;        this.baseCritDamage = baseCritDamage;&#10;    }&#10;&#10;    public void setCurrentCritDamage(double currentCritDamage) {&#10;        this.currentCritDamage = currentCritDamage;&#10;    }&#10;&#10;    public void setBaseAttackSpeed(double baseAttackSpeed) {&#10;        this.baseAttackSpeed = baseAttackSpeed;&#10;    }&#10;&#10;    public void setCurrentAttackSpeed(double currentAttackSpeed) {&#10;        this.currentAttackSpeed = currentAttackSpeed;&#10;    }&#10;&#10;    // 重置所有当前值为基础值&#10;    public void resetToBaseStats() {&#10;        this.currentATK = getBaseATK();&#10;        this.currentDef = getBaseDef();&#10;        this.currentDodgeRate = getBaseDodgeRate();&#10;        this.currentSpeed = getBaseSpeed();&#10;        this.currentCritRate = this.baseCritRate;&#10;        this.currentCritDamage = this.baseCritDamage;&#10;        this.currentAttackSpeed = this.baseAttackSpeed;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.landsofexile.core.model;&#10;&#10;import org.landsofexile.core.entities.EntityType;&#10;&#10;public class BasePlayer extends BaseLife {&#10;    /*&#10;    * 角色基础模型&#10;    * */&#10;    &#10;    private double currentATK; // 当前攻击力（包含增益和减益）&#10;    private double currentDef; // 当前防御力（包含增益和减益）&#10;    private double currentDodgeRate; // 当前闪避率（包含增益和减益）&#10;    private double currentSpeed; // 当前移动速度（包含增益和减益）&#10;    &#10;    private double baseCritRate; // 基础暴击率（百分比）&#10;    private double currentCritRate; // 当前暴击率（包含增益和减益，百分比）&#10;    &#10;    private double baseCritDamage; // 暴击伤害加成（百分比）&#10;    private double currentCritDamage; // 当前暴击伤害加成（包含增益和减益，百分比）&#10;    &#10;    private double baseAttackSpeed; // 攻击速度（影响攻击频率）&#10;    private double currentAttackSpeed; // 当前攻击速度（包含增益和减益）&#10;&#10;    // 构造方法&#10;    public BasePlayer() {&#10;        super();&#10;    }&#10;&#10;    public BasePlayer(String name, EntityType type, String description, int level,&#10;                     double maxHP, double baseATK, double baseDef, &#10;                     double baseDodgeRate, double baseSpeed,&#10;                     double baseCritRate, double baseCritDamage,&#10;                     double baseAttackSpeed) {&#10;        super(name, type, description, level, maxHP, baseATK, baseDef, baseDodgeRate, baseSpeed);&#10;        this.currentATK = baseATK;&#10;        this.currentDef = baseDef;&#10;        this.currentDodgeRate = baseDodgeRate;&#10;        this.currentSpeed = baseSpeed;&#10;        this.baseCritRate = baseCritRate;&#10;        this.currentCritRate = baseCritRate;&#10;        this.baseCritDamage = baseCritDamage;&#10;        this.currentCritDamage = baseCritDamage;&#10;        this.baseAttackSpeed = baseAttackSpeed;&#10;        this.currentAttackSpeed = baseAttackSpeed;&#10;    }&#10;&#10;    // Getter 方法&#10;    public double getCurrentATK() {&#10;        return currentATK;&#10;    }&#10;&#10;    public double getCurrentDef() {&#10;        return currentDef;&#10;    }&#10;&#10;    public double getCurrentDodgeRate() {&#10;        return currentDodgeRate;&#10;    }&#10;&#10;    public double getCurrentSpeed() {&#10;        return currentSpeed;&#10;    }&#10;&#10;    public double getBaseCritRate() {&#10;        return baseCritRate;&#10;    }&#10;&#10;    public double getCurrentCritRate() {&#10;        return currentCritRate;&#10;    }&#10;&#10;    public double getBaseCritDamage() {&#10;        return baseCritDamage;&#10;    }&#10;&#10;    public double getCurrentCritDamage() {&#10;        return currentCritDamage;&#10;    }&#10;&#10;    public double getBaseAttackSpeed() {&#10;        return baseAttackSpeed;&#10;    }&#10;&#10;    public double getCurrentAttackSpeed() {&#10;        return currentAttackSpeed;&#10;    }&#10;&#10;    // Setter 方法&#10;    public void setCurrentATK(double currentATK) {&#10;        this.currentATK = currentATK;&#10;    }&#10;&#10;    public void setCurrentDef(double currentDef) {&#10;        this.currentDef = currentDef;&#10;    }&#10;&#10;    public void setCurrentDodgeRate(double currentDodgeRate) {&#10;        this.currentDodgeRate = currentDodgeRate;&#10;    }&#10;&#10;    public void setCurrentSpeed(double currentSpeed) {&#10;        this.currentSpeed = currentSpeed;&#10;    }&#10;&#10;    public void setBaseCritRate(double baseCritRate) {&#10;        this.baseCritRate = baseCritRate;&#10;    }&#10;&#10;    public void setCurrentCritRate(double currentCritRate) {&#10;        this.currentCritRate = currentCritRate;&#10;    }&#10;&#10;    public void setBaseCritDamage(double baseCritDamage) {&#10;        this.baseCritDamage = baseCritDamage;&#10;    }&#10;&#10;    public void setCurrentCritDamage(double currentCritDamage) {&#10;        this.currentCritDamage = currentCritDamage;&#10;    }&#10;&#10;    public void setBaseAttackSpeed(double baseAttackSpeed) {&#10;        this.baseAttackSpeed = baseAttackSpeed;&#10;    }&#10;&#10;    public void setCurrentAttackSpeed(double currentAttackSpeed) {&#10;        this.currentAttackSpeed = currentAttackSpeed;&#10;    }&#10;&#10;    // 重置所有当前值为基础值&#10;    public void resetToBaseStats() {&#10;        this.currentATK = getBaseATK();&#10;        this.currentDef = getBaseDef();&#10;        this.currentDodgeRate = getBaseDodgeRate();&#10;        this.currentSpeed = getBaseSpeed();&#10;        this.currentCritRate = this.baseCritRate;&#10;        this.currentCritDamage = this.baseCritDamage;&#10;        this.currentAttackSpeed = this.baseAttackSpeed;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>